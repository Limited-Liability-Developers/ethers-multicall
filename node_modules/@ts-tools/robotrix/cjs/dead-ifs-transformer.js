"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
/**
 * Detects and removes dead `if` branches.
 * Checks the expression of every `if` statement, and cancels out always falsy branches.
 * It detects `true`, `false`, and basic string equality comparison.
 */
function deadIfsTransformer(context) {
    return sourceFile => {
        return typescript_1.default.visitEachChild(sourceFile, visitIfStatements, context);
    };
    function visitIfStatements(node) {
        if (typescript_1.default.isIfStatement(node)) {
            const expression = visitIfExpression(node.expression);
            if (expression.kind === typescript_1.default.SyntaxKind.TrueKeyword) {
                // replace expression with `true` and else (if exists) with an empty block
                node = typescript_1.default.updateIf(node, expression, node.thenStatement, undefined);
            }
            else if (expression.kind === typescript_1.default.SyntaxKind.FalseKeyword) {
                // replace expression with `false` and then with an empty block
                node = typescript_1.default.updateIf(node, expression, typescript_1.default.createBlock([]), node.elseStatement);
            }
        }
        return typescript_1.default.visitEachChild(node, visitIfStatements, context);
    }
}
exports.deadIfsTransformer = deadIfsTransformer;
/**
 * Finds string literal comparisons and replaces them with true/false.
 */
function visitIfExpression(node) {
    if (typescript_1.default.isBinaryExpression(node) &&
        typescript_1.default.isStringLiteral(node.left) &&
        typescript_1.default.isStringLiteral(node.right)) {
        const { kind } = node.operatorToken;
        if (
        // operator is `==` or `===`
        kind === typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken ||
            kind === typescript_1.default.SyntaxKind.EqualsEqualsToken) {
            return node.left.text === node.right.text ? typescript_1.default.createTrue() : typescript_1.default.createFalse();
        }
        else if (
        // operator is `!=` or `!==`
        kind === typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken ||
            kind === typescript_1.default.SyntaxKind.ExclamationEqualsToken) {
            return node.left.text !== node.right.text ? typescript_1.default.createTrue() : typescript_1.default.createFalse();
        }
    }
    return node;
}
//# sourceMappingURL=dead-ifs-transformer.js.map