"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
/**
 * Remaps esnext and commonjs imports.
 */
function createRemapImportsTransformer({ remapTarget }) {
    return context => sourceFile => remapSourceFileImports(sourceFile, context, remapTarget);
}
exports.createRemapImportsTransformer = createRemapImportsTransformer;
function remapSourceFileImports(sourceFile, context, remapTarget) {
    const { fileName } = sourceFile;
    return typescript_1.default.visitEachChild(sourceFile, visitStaticImportsExports, context);
    /**
     * Visitor for static imports/re-exports, such as:
     *
     * import {something} from 'target'
     * import * as something from 'target'
     *
     * export {something} from 'target'
     * export * from 'target'
     */
    function visitStaticImportsExports(node) {
        if (typescript_1.default.isImportDeclaration(node) && typescript_1.default.isStringLiteral(node.moduleSpecifier)) {
            const originalTarget = node.moduleSpecifier.text;
            const remappedTarget = remapTarget(originalTarget, fileName, sourceFile);
            if (originalTarget !== remappedTarget) {
                return typescript_1.default.updateImportDeclaration(node, node.decorators, node.modifiers, node.importClause, typescript_1.default.createLiteral(remappedTarget));
            }
        }
        else if (typescript_1.default.isExportDeclaration(node) && node.moduleSpecifier && typescript_1.default.isStringLiteral(node.moduleSpecifier)) {
            const originalTarget = node.moduleSpecifier.text;
            const remappedTarget = remapTarget(originalTarget, fileName, sourceFile);
            if (originalTarget !== remappedTarget) {
                return typescript_1.default.updateExportDeclaration(node, node.decorators, node.modifiers, node.exportClause, typescript_1.default.createLiteral(remappedTarget));
            }
        }
        // if not a static import/re-export, might be a dynamic import
        // so run that recursive visitor on `node`
        return visitDynamicImports(node);
    }
    /**
     * Visitor for dynamic and commonjs imports, such as:
     *
     * import('target').then(...)
     * require('target')
     */
    function visitDynamicImports(node) {
        if (typescript_1.default.isCallExpression(node) &&
            (isDynamicImportKeyword(node.expression) || isRequireIdentifier(node.expression)) &&
            node.arguments.length === 1 &&
            typescript_1.default.isStringLiteral(node.arguments[0])) {
            const originalTarget = node.arguments[0].text;
            const remappedTarget = remapTarget(originalTarget, fileName, sourceFile);
            if (originalTarget !== remappedTarget) {
                return typescript_1.default.updateCall(node, node.expression, node.typeArguments, [typescript_1.default.createLiteral(remappedTarget)]);
            }
        }
        return typescript_1.default.visitEachChild(node, visitDynamicImports, context);
    }
}
exports.remapSourceFileImports = remapSourceFileImports;
function isRequireIdentifier(expression) {
    return typescript_1.default.isIdentifier(expression) && expression.text === 'require';
}
function isDynamicImportKeyword(expression) {
    return expression.kind === typescript_1.default.SyntaxKind.ImportKeyword;
}
//# sourceMappingURL=remap-imports-transformer.js.map