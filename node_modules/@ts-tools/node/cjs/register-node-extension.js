"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const source_map_support_1 = __importDefault(require("source-map-support"));
const service_1 = require("@ts-tools/service");
const constants_1 = require("./constants");
function registerNodeExtension(onDiagnostics) {
    // a map holding `file path` to its `matching source maps` (base64-encoded, stringified JSON)
    const sourceMaps = new Map();
    // our service instance, to be used by the require hook
    const tsService = new service_1.TypeScriptService();
    // connects source maps of the service to source-map-support
    source_map_support_1.default.install({
        environment: 'node',
        retrieveSourceMap: (filePath) => {
            const fileSourceMap = sourceMaps.get(filePath);
            return fileSourceMap ? { map: Buffer.from(fileSourceMap, 'base64').toString(), url: filePath } : null;
        }
    });
    // our require extension transpiles the file to js using the service
    // and then runs the resulting js like any regular js
    function requireExtension(nodeModule, filePath) {
        const { diagnostics, outputText, baseHost } = tsService.transpileFile(filePath, constants_1.transpilationOptions);
        if (diagnostics && diagnostics.length && onDiagnostics) {
            onDiagnostics(constants_1.tsFormatFn(diagnostics, baseHost));
        }
        const inlineSourceMapIdx = outputText.lastIndexOf(constants_1.inlineSourceMapPrefix);
        if (inlineSourceMapIdx !== -1) {
            sourceMaps.set(filePath, outputText.slice(inlineSourceMapIdx + constants_1.inlineSourceMapPrefix.length).trimRight());
        }
        else {
            sourceMaps.delete(filePath);
        }
        nodeModule._compile(outputText, filePath);
    }
    // register our extension for the two default supported extensions
    require.extensions['.ts'] = require.extensions['.tsx'] = requireExtension;
    return { tsService, sourceMaps };
}
exports.registerNodeExtension = registerNodeExtension;
//# sourceMappingURL=register-node-extension.js.map