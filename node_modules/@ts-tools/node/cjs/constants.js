"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const robotrix_1 = require("@ts-tools/robotrix");
const { sys } = typescript_1.default;
const platformHasColors = !!sys.writeOutputIsTTY && sys.writeOutputIsTTY();
exports.tsFormatFn = platformHasColors ? typescript_1.default.formatDiagnosticsWithColorAndContext : typescript_1.default.formatDiagnostics;
exports.inlineSourceMapPrefix = '//# sourceMappingURL=data:application/json;base64,';
const forcedOptions = {
    module: typescript_1.default.ModuleKind.CommonJS,
    inlineSourceMap: true,
    sourceMap: false,
    inlineSources: false,
    sourceRoot: undefined,
    mapRoot: undefined,
    outDir: undefined,
    outFile: undefined,
    out: undefined,
    noEmit: false,
    declaration: false,
    declarationMap: false
};
exports.transpilationOptions = {
    getCompilerOptions(_baseHost, tsconfigOptions) {
        const compilerOptions = Object.assign({}, tsconfigOptions, forcedOptions);
        if (compilerOptions.target === undefined || compilerOptions.target < typescript_1.default.ScriptTarget.ES2017) {
            // we support Node 8+, so force newer syntax even if we found a tsconfig with target: 'es5'
            compilerOptions.target = typescript_1.default.ScriptTarget.ES2017;
        }
        if (!tsconfigOptions) {
            compilerOptions.esModuleInterop = true;
            compilerOptions.jsx = typescript_1.default.JsxEmit.React;
        }
        return compilerOptions;
    },
    getCustomTransformers(_baseHost, compilerOptions) {
        return compilerOptions && compilerOptions.baseUrl ? { after: [robotrix_1.resolvedModulesTransformer] } : undefined;
    }
};
//# sourceMappingURL=constants.js.map