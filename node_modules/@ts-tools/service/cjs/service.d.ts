import ts from 'typescript';
import { IBaseHost, ICustomFs, ITranspilationOutput, ILanguageServiceInstance } from './types';
export interface ITranspilationOptions {
    /**
     * Absolute path to the current working directory.
     */
    cwd?: string;
    /**
     * This can be provided so that hosts are built around the custom fs.
     */
    getCustomFs?: () => ICustomFs;
    /**
     * TypeScript configuration file name.
     *
     * @default 'tsconfig.json'
     */
    tsconfigFileName?: string;
    /**
     * Should transpilation be isolated, meaning no `tsconfig.json`
     * lookup, and no type checking.
     *
     * @default false
     */
    isolated?: boolean;
    /**
     * Provided callback should return the final resolved compiler options.
     *
     * @param tsconfigOptions user's own tsconfig options, if found
     */
    getCompilerOptions(baseHost: IBaseHost, tsconfigOptions?: Readonly<ts.CompilerOptions>): ts.CompilerOptions;
    /**
     * Transformers to apply during transpilation.
     *
     * @param tsconfigOptions user's own tsconfig options, if found
     */
    getCustomTransformers?(baseHost: IBaseHost, tsconfigOptions?: Readonly<ts.CompilerOptions>): ts.CustomTransformers | undefined;
}
/**
 * On-demand TypeScript tranpilation service
 * Options can be provided during construction
 *
 * @example
 * new TypeScriptService()
 * new TypeScriptService({ tsconfigFileName: 'tsconfig.test.json' })
 */
export declare class TypeScriptService {
    runningServices: Map<string, ILanguageServiceInstance>;
    private documentRegistries;
    private directoryToTsConfig;
    /**
     * Transpile a TypeScript file on the native file system
     *
     * @param filePath absolute path of the source file to transpile
     */
    transpileFile(filePath: string, transpileOptions: ITranspilationOptions): ITranspilationOutput;
    /**
     * Clears all running language services, document registries,
     * and tsconfig resolution cache.
     */
    clear(): void;
    private transpileUsingLanguageService;
    private transpileIsolated;
    /**
     * Find the closest `tsconfig.json` file to the provided baseDirectory
     *
     * @param baseDirectory the directory to start looking from
     */
    private getTsConfigPath;
    private createLanguageService;
    private getDocumentRegistry;
    private createErrorDiagnostic;
}
//# sourceMappingURL=service.d.ts.map