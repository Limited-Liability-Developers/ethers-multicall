"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importStar(require("typescript"));
const identity = (val) => val;
const toLowerCase = (val) => val.toLowerCase();
function createBaseHost(cwd) {
    return {
        fileExists: typescript_1.sys.fileExists,
        directoryExists: typescript_1.sys.directoryExists,
        readFile: typescript_1.sys.readFile,
        readDirectory: typescript_1.sys.readDirectory,
        getDirectories: typescript_1.sys.getDirectories,
        realpath: typescript_1.sys.realpath,
        useCaseSensitiveFileNames: typescript_1.sys.useCaseSensitiveFileNames,
        getCanonicalFileName: typescript_1.sys.useCaseSensitiveFileNames ? identity : toLowerCase,
        getCurrentDirectory: () => cwd,
        getNewLine: () => typescript_1.sys.newLine,
        dirname: typescript_1.default.getDirectoryPath,
        normalize: typescript_1.default.sys.resolvePath
    };
}
exports.createBaseHost = createBaseHost;
function createCustomFsBaseHost(cwd, customFs) {
    const { caseSensitive, statSync, readFileSync, readdirSync, join, dirname, normalize, realpathSync } = customFs;
    function getFileSystemEntries(path) {
        const files = [];
        const directories = [];
        try {
            const dirEntries = readdirSync(path);
            for (const entryName of dirEntries) {
                const entryStats = statSync(join(path, entryName));
                if (!entryStats) {
                    continue;
                }
                if (entryStats.isFile()) {
                    files.push(entryName);
                }
                else if (entryStats.isDirectory()) {
                    directories.push(entryName);
                }
            }
        }
        catch ( /* */_a) { /* */ }
        return { files, directories };
    }
    return {
        readDirectory(rootDir, extensions, excludes, includes, depth) {
            return typescript_1.default.matchFiles(rootDir, extensions, excludes, includes, caseSensitive, rootDir, depth, getFileSystemEntries);
        },
        getDirectories(path) {
            return getFileSystemEntries(path).directories;
        },
        fileExists(path) {
            try {
                return statSync(path).isFile();
            }
            catch (_a) {
                return false;
            }
        },
        directoryExists(path) {
            try {
                return statSync(path).isDirectory();
            }
            catch (_a) {
                return false;
            }
        },
        readFile(path) {
            try {
                return readFileSync(path, 'utf8');
            }
            catch (_a) {
                return undefined;
            }
        },
        useCaseSensitiveFileNames: caseSensitive,
        getCanonicalFileName: caseSensitive ? identity : toLowerCase,
        getCurrentDirectory: () => cwd,
        getNewLine: () => typescript_1.default.sys ? typescript_1.default.sys.newLine : '\n',
        realpath: realpathSync,
        dirname,
        normalize
    };
}
exports.createCustomFsBaseHost = createCustomFsBaseHost;
function createLanguageServiceHost(baseHost, fileNames, compilerOptions, customTransformers) {
    const targetNewLine = typescript_1.default.getNewLineCharacter(compilerOptions, baseHost.getNewLine);
    return Object.assign({}, baseHost, { getCompilationSettings: () => compilerOptions, getScriptFileNames: () => fileNames, getScriptVersion(filePath) {
            const stats = typescript_1.sys.getModifiedTime(filePath);
            return stats ? `${stats.getTime()}` : `${Date.now()}`;
        },
        getScriptSnapshot(filePath) {
            const fileContents = typescript_1.sys.readFile(filePath);
            return fileContents !== undefined ? typescript_1.default.ScriptSnapshot.fromString(fileContents) : undefined;
        }, getDefaultLibFileName: typescript_1.default.getDefaultLibFilePath, useCaseSensitiveFileNames: () => typescript_1.sys.useCaseSensitiveFileNames, getCustomTransformers: customTransformers ? () => customTransformers : undefined, getNewLine: () => targetNewLine });
}
exports.createLanguageServiceHost = createLanguageServiceHost;
function createCustomFsLanguageServiceHost(baseHost, fileNames, compilerOptions, customFs, customTransformers) {
    const { statSync, readFileSync, join, defaultLibsDirectory, caseSensitive } = customFs;
    const targetNewLine = typescript_1.default.getNewLineCharacter(compilerOptions, baseHost.getNewLine);
    return Object.assign({}, baseHost, { getCompilationSettings: () => compilerOptions, getScriptFileNames: () => fileNames, getScriptVersion(filePath) {
            const stats = statSync(filePath);
            return stats ? `${stats.mtime.getTime()}` : `${Date.now()}`;
        },
        getScriptSnapshot(filePath) {
            const fileContents = readFileSync(filePath);
            return fileContents ? typescript_1.default.ScriptSnapshot.fromString(fileContents) : undefined;
        }, getDefaultLibFileName: options => join(defaultLibsDirectory, typescript_1.default.getDefaultLibFileName(options)), useCaseSensitiveFileNames: () => caseSensitive, getCustomTransformers: customTransformers ? () => customTransformers : undefined, getNewLine: () => targetNewLine });
}
exports.createCustomFsLanguageServiceHost = createCustomFsLanguageServiceHost;
//# sourceMappingURL=create-host.js.map